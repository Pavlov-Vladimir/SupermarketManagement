@page "/EditProduct/{ProductId:int}"

<h3>Edit Product "@Product?.Name"</h3>

@if (Product is null && Categories is null && ErrorMessage is null)
{
    <p>Loading data...</p>
}
else if (ErrorMessage is not null)
{
    <h5 class="alert alert-danger my-4">@ErrorMessage</h5>
}
else
{
    <EditProductDetails Product="Product" Categories="Categories" HandleValidSubmit="HandleValidSubmit" />
}

@code {
    [Parameter]
    public int ProductId { get; set; }

    public Product? Product { get; set; }
    public IEnumerable<Category>? Categories { get; set; }
    public string? ErrorMessage { get; set; }

    [Inject]
    public IGetProductByIdUseCase GetProductByIdUseCase { get; set; } = null!;
    [Inject]
    public IViewCategoriesUseCase ViewCategoriesUseCase { get; set; } = null!;
    [Inject]
    public IEditProductUseCase EditProductUseCase { get; set; } = null!;
    [Inject]
    public NavigationManager NavigationManager { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Product = await GetProductByIdUseCase.Execute(ProductId);
            Categories = await ViewCategoriesUseCase.Execute();
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }        
    }

    protected async Task HandleValidSubmit(Product product)
    {
        try
        {
            product.Price = Math.Round(product.Price, 2);
            await EditProductUseCase.Execute(product);
            NavigationManager.NavigateTo("/Products");
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }        
    }
}
