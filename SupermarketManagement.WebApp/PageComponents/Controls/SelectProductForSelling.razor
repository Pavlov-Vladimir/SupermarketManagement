<div class="form-group mb-3">
    <label for="category">Category</label>
    <select id="category" class="form-select" @bind="CategoryId">
        @if (CategoryId == STARTED_CATEGORY_ID)
        {
            <option value="@STARTED_CATEGORY_ID" selected>Select Category...</option>
        }
        @foreach (var category in Categories!)
        {
            <option value="@category.Id">@category.Name</option>
        }
    </select>
</div>

@if (Products is not null)
{
    <h5>Products:</h5>
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Qty</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Products)
            {
                <tr>
                    <td>@item.Name</td>
                    <td>@item.Quantity</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    public Product? ProductToSell { get; set; } 
    public Category? Category { get; set; }
    public IEnumerable<Product>? Products { get; set; }
    public IEnumerable<Category>? Categories { get; set; }
    private int _categoryId;
    public int CategoryId
    {
        get => _categoryId;
        set
        {
            _categoryId = value;
            if (_categoryId > 0)
            {
                GetProductsList(_categoryId);
            }            
        }
    }
    private const int STARTED_CATEGORY_ID = -1;
    [Inject]
    public IViewProductsByCategoryIdUseCase ViewProductsByCategoryId { get; set; } = null!;
    [Inject]
    public IViewCategoriesUseCase ViewCategoriesUseCase { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        CategoryId = STARTED_CATEGORY_ID;
        Categories = await ViewCategoriesUseCase.Execute();
    }

    private async Task GetProductsList(int categoryId)
    {
        Products = await ViewProductsByCategoryId.Execute(categoryId);
    }
}
