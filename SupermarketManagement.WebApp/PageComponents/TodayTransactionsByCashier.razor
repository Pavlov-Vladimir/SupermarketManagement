<table class="table">
    <thead>
        <tr>
            <th>Cashier</th>
            <th>Product</th>
            <th>Date Time</th>
            <th>Qty Before</th>
            <th>Qty Sold</th>
            <th>Qty After</th>
            <th>Price</th>
            <th>Amount</th>
        </tr>
    </thead>
    @if (Transactions is not null)
    {
        <tbody>
            @foreach (var item in Transactions)
            {
                <tr>
                    <td>@item.CashierName</td>
                    <td>@GetProductName(item.ProductId)</td>
                    <td>@item.TimeStamp.ToString("dd/MM HH:mm")</td>
                    <td>@item.QtyBefore</td>
                    <td>@item.QtySold</td>
                    <td>@(item.QtyBefore - item.QtySold)</td>
                    <td>$@string.Format("{0:N}", GetProductPrice(item.ProductId))</td>
                    <td>$@string.Format("{0:N}", item.Price)</td>
                </tr>
            }
        </tbody>
        <tfoot>
            <tr>
                <th colspan="7" class="text-end pe-5">Total Amount:</th>
                <th>$@string.Format("{0:N}", (Transactions.Sum(t => t.Price)))</th>
            </tr>
        </tfoot>
    }
</table>

@code {
    public List<Transaction>? Transactions { get; set; }
    [Inject]
    public IGetProductByIdUseCase GetProductByIdUseCase { get; set; } = null!;
    [Inject]
    public ITodayTransactionsByCashierUseCase TodayTransactionsByCashierUseCace { get; set; } = null!;

    public void LoadTransactions(string cashierName)
    {
        try
        {
            Transactions = TodayTransactionsByCashierUseCace.Execute(cashierName)?.ToList();
            StateHasChanged();
        }
        catch (Exception)
        {
            throw;
        }

    }

    private string? GetProductName(int productId)
    {
        try
        {
            return GetProductByIdUseCase.Execute(productId)?.Name;
        }
        catch (Exception)
        {
            throw;
        }
    }

    private decimal GetProductPrice(int productId)
    {
        try
        {
            var product = GetProductByIdUseCase.Execute(productId);
            return product is null ? 0 : product.Price;
        }
        catch (Exception)
        {
            throw;
        }
    }
}
